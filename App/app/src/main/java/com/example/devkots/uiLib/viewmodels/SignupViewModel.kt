package com.example.devkots.uiLib.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.devkots.data.RetrofitInstance
import com.example.devkots.model.User
import com.example.devkots.util.HashUtil
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class SignupViewModel (
    private val userSessionViewModel: UserSessionViewModel
): ViewModel() {
    private val _name = MutableStateFlow("")
    val name: StateFlow<String> = _name

    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email

    private val _password = MutableStateFlow("")
    val password: StateFlow<String> = _password

    private val _signupSuccess = MutableStateFlow(false)
    val signupSuccess: StateFlow<Boolean> = _signupSuccess

    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage

    fun onNameChange(newName: String) {
        _name.value = newName
    }

    fun onEmailChange(newEmail: String) {
        _email.value = newEmail
    }

    fun onPasswordChange(newPassword: String) {
        _password.value = newPassword
    }

    fun register() {
        viewModelScope.launch {
            // Check if required fields are filled
            if (name.value.isBlank() || email.value.isBlank() || password.value.isBlank()) {
                _errorMessage.value = "Please fill in all fields."
                return@launch
            }

            try {
                // Hash the password before sending
                val hashedPassword = HashUtil.sha256(password.value)
                val newUser = User(
                    id = 0, // ID will be autogenerated by the JSON-server
                    mail = email.value,
                    name = name.value,
                    password = hashedPassword
                )

                // Make API call to register user
                val response = RetrofitInstance.api.registerUser(newUser)
                if (response.isSuccessful) {
                    _signupSuccess.value = true // Registration was successful
                    _errorMessage.value = null  // Clear any previous error

                    val responseLogin = RetrofitInstance.api.getUsersByEmail(email.value)
                    if (responseLogin.isSuccessful) {
                        val user = responseLogin.body()?.firstOrNull()
                        if (user != null) {
                            if (user.password == hashedPassword) {
                                println("Login successful")
                                _signupSuccess.value = true
                                // Update UserSessionViewModel with user info, passing name, email, and biomonitorId
                                userSessionViewModel.loginUser(
                                    name = user.name,
                                    email = user.mail, // Pass the email here
                                    biomonitorId = user.id.toString()
                                )
                            } else {
                                _errorMessage.value = "Invalid email or password"
                            }
                        } else {
                            _errorMessage.value = "User not found"
                        }

                    }
                } else {
                    _errorMessage.value = "Failed to register user"
                }
            } catch (e: Exception) {
                _errorMessage.value = "Error: ${e.message}"
            }
        }
    }
}